import ch.so.agi.gretl.tasks.*

apply plugin: 'ch.so.agi.gretl'

def GRETLTEST_DBURI = 'gretltest_dburi_pg'
def db_uri = findProperty(GRETLTEST_DBURI) != null ? findProperty(GRETLTEST_DBURI) : 'jdbc:postgresql://localhost:5432/gretl'

def db_user = "ddluser"
def db_pass = "ddluser"
def db_schema = "afu_schutzbauten_v1_fail"

defaultTasks 'validate'

tasks.register('schemaimport', Ili2pgImportSchema) {
    database = [db_uri, db_user, db_pass]
    models = "SO_AFU_Schutzbauten_20231212"
    modeldir = rootProject.projectDir.toString() + ";http://models.interlis.ch"
    dbschema = db_schema
    coalesceMultiSurface = true
    coalesceMultiLine = true
    createBasketCol = true
    createTidCol = true
    defaultSrsAuth = "EPSG"
    defaultSrsCode = "2056"
    importTid = true
    smart2Inheritance = true
    strokeArcs = true
}

tasks.register('importdatasets', Ili2pgImport) {
    dependsOn 'schemaimport'
    database = [db_uri, db_user, db_pass]
    models = "SO_AFU_Schutzbauten_20231212"
    modeldir = rootProject.projectDir.toString() + ";http://models.interlis.ch"
    dbschema = db_schema
    dataFile = ["ch.so.agi.testeinzelobjekt_valid.xtf","ch.so.agi.testeinzelobjekt_valid.xtf"] 
    dataset = ["agi.testeinzelobjekt1","agi.testeinzelobjekt2"]
}

/**
 * Wir laden zweimal dieselben Daten als unterschiedliche Datasets in die DB.
 * Darum sind mehrere Eindeutigkeitsbedingungen verletzt und die Validierung
 * Ã¼ber das gesamte Schema muss fehlschlagen.
 * Die Daten sind nur innerhalb ihres eigenen Datasets valide.
 */
tasks.register('validate', Ili2pgValidate) {
    dependsOn 'importdatasets'
    database = [db_uri, db_user, db_pass]
    models = "SO_AFU_Schutzbauten_20231212"
    modeldir = rootProject.projectDir.toString() + ";http://models.interlis.ch"
    dbschema = db_schema
    logFile = file("validation.log")
}

