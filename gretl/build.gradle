plugins {
    id 'java-library'
    id 'eclipse'
    id 'java-gradle-plugin'
    id 'maven-publish'
    alias libs.plugins.plugin.publish
    alias libs.plugins.cyclonedx.bom
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileJava.options.encoding = 'US-ASCII'

apply from: 'integration-test.gradle'

// to get the latest SNAPSHOT uncomment the following lines
configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

Properties properties = new Properties()
File propFile=project.file('user.properties')
if(propFile.exists()){
	properties.load(propFile.newDataInputStream())
}
def dburl = System.getProperty('dburl',properties.get('dburl'))
def dbusr = System.getProperty('dbusr',properties.get('dbusr'))
def dbpwd = System.getProperty('dbpwd',properties.get('dbpwd'))
def ftpurl = System.getProperty('ftpurl',properties.get('ftpurl'))
def ftpusr = System.getProperty('ftpusr',properties.get('ftpusr'))
def ftppwd = System.getProperty('ftppwd',properties.get('ftppwd'))

configurations.all {
    resolutionStrategy { 
        force 'ch.interlis:ili2c-tool:5.3.2' 
        force 'ch.interlis:ili2c-core:5.3.2'
        force 'ch.interlis:ili2gpkg:4.11.1'
        force 'ch.interlis:iox-ili:1.21.18'
    }
}

configurations {
    integrationTestImplementation {
    }
    testImplementation {
        exclude group: 'org.apache.hadoop', module: 'hadoop-core' // Konflikt zwischen "core" und "client". Siehe iox-parquet.
        exclude group: 'org.slf4j', module: 'slf4j-reload4j'
    }

    integrationTestImplementation.extendsFrom implementation
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestImplementation.extendsFrom runtime
    integrationTestImplementation.extendsFrom testRuntime

    all*.exclude module: 'spring-boot-starter-logging'
    
    all*.exclude group: 'org.slf4j', module: 'slf4j-simple'
    all*.exclude group: 'ch.qos.logback', module: 'logback-classic'    
}

dependencies {
    api gradleApi()
  
    api libs.ili.validator
    api libs.ili.custom.validator.functions
    api libs.ili.custom.validator.geometries
    api libs.geow.custom.functions
    api (libs.ili2.pg) {
        exclude group: 'ch.ehi', module: 'ehisqlgen'
    }
    api (libs.ili2.gpkg) {
        exclude group: 'ch.ehi', module: 'ehisqlgen'
    }
    api (libs.iox.wkf) {
        // Exclude old dependencies. These get overriden anyways.
        // And they show on Snaphots...
        exclude group: 'ch.interlis', module: 'ili2pg'
        exclude group: 'ch.interlis', module: 'ili2gpkg'
    }

    api libs.iox.ili
    api libs.ehi.sql.gen

    api (libs.iox.formats) {
        //todo: can we also use the libs.versions.toml versions here?
        exclude group: 'org.slf4j', module: 'slf4j-reload4j'
    }

    api libs.av2.ch
    api libs.av2.geobau
    
    api libs.aws.sdk.s3
    
    api libs.apache.commons.io
    api libs.apache.commons.net
    api libs.apache.commons.code
    api libs.apache.http.client
    api libs.apache.http.mime
    
    api libs.jackson.core
    api libs.jackson.data.bind
    
    api libs.saxon
    
    api libs.tomlj
    
    api libs.freemarker
    
	api libs.sftp.fs
    
    runtimeOnly libs.postgresql
    runtimeOnly libs.sqlite.jdbc
    runtimeOnly libs.derby
    runtimeOnly libs.duckdb
    runtimeOnly libs.oracle
    
    testImplementation libs.junit
    testImplementation libs.test.containers.base
    testImplementation libs.test.containers.postgresql
    
    testImplementation libs.mock.web.server

    testImplementation libs.test.containers.oracle

    testImplementation libs.tomcat.embed.core
    
    testImplementation libs.hadoop.client
    integrationTestImplementation libs.hadoop.client
    
}

gradlePlugin {
    plugins {
        gretlPlugin {
            id = 'ch.so.agi.gretl'
            implementationClass = 'ch.so.agi.gretl.gradle.GretlPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/sogis/gretl' 
    vcsUrl = 'https://github.com/sogis/gretl.git' 
    tags = ['etl', 'gis', 'sdi', 'geo', 'geoinformation', 'interlis', 'geopackage', 'shapefile', 'csv', 'database', 'postgresql', 'sqlite', 'ili2pg', 'ilivalidator'] 
    
    plugins { 
        gretlPlugin {  
            displayName = 'GRETL' 
            description = 'The Gradle gretl plugin extends gradle for use as a sql-centric (geo)data etl. gretl = gradle etl.' 
        }
    }
}

task setupPluginUpload() {
    description = "Converts Gradle plugin publish key and secret from environment variable to system property. (Workaround)"
    doLast {
	    def key=System.env.gradlePublishKey
	    def secret = System.env.gradlePublishSecret
	
	    if( !key || !secret)
	    {
	        throw new RuntimeException("gradlePublishKey and/or gradlePublishSecret are not defined environment variables")
	    }
	
	    System.properties.setProperty("gradle.publish.key", key)
	    System.properties.setProperty("gradle.publish.secret", secret)
    }
}
tasks.publishPlugins.dependsOn tasks.setupPluginUpload

test {
    useJUnit{
        // Exclude all Tests with dependency to a db server (pg, oracle, ..)
        excludeCategories 'ch.so.agi.gretl.testutil.DbTest'
        excludeCategories 'ch.so.agi.gretl.testutil.SftpTest'
        excludeCategories 'ch.so.agi.gretl.testutil.S3Test'
    }
}

task dbTest(type: Test, dependsOn: [compileJava, compileTestJava]) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs all unit tests with dependency to a db server (pg, oracle, ...).'
    useJUnit {
        includeCategories 'ch.so.agi.gretl.testutil.DbTest'
    }
}
task sftpTest(type: Test, dependsOn: [compileJava, compileTestJava]) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs all unit tests with dependency to a SFTP server'
    useJUnit {
        includeCategories 'ch.so.agi.gretl.testutil.SftpTest'
    }
}

def s3AccessKey = System.getProperty('s3AccessKey',properties.get('s3AccessKey'))
def s3SecretKey = System.getProperty('s3SecretKey',properties.get('s3SecretKey'))
def s3BucketName = System.getProperty('s3BucketName',properties.get('s3BucketName'))

task s3Test(type: Test, dependsOn: [compileJava, compileTestJava]) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs all unit tests with dependency to AWS S3.'
    
    useJUnit {
        includeCategories 'ch.so.agi.gretl.testutil.S3Test'
    }
}

// Transfer the required configuration variables to the test code.
// (The test code has no access to the -D or -P variables as it is executed in a separate jvm-process)
tasks.withType(Test) {
    def GRETLTEST_DBURI = 'gretltest_dburi_pg'
    systemProperty(GRETLTEST_DBURI, findProperty(GRETLTEST_DBURI))
    
    systemProperty('GRETL_PROJECT_ABS_PATH', project(':gretl').getProjectDir().getAbsolutePath())
    systemProperty('ROOT_PROJECT_ABS_PATH', project.getRootProject().getProjectDir().getAbsolutePath())
    
    systemProperty 's3AccessKey', s3AccessKey
    systemProperty 's3SecretKey', s3SecretKey
    systemProperty 's3BucketName', s3BucketName
}

cyclonedxBom {
   includeConfigs = ["runtimeClasspath"]
   destination = file("build/reports")
   outputName = "Sbom"
   outputFormat = "all"
}

/*
   Starting with 7.0.0 there is no default strategy anymore. So it has to be explicitly set.
   https://github.com/gradle/gradle/issues/17236
 */
processResources{
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

/*
   init_postgresql.sql seems to be copied multiple times.
   Starting with 7.0.0 there is no default strategy anymore. So it has to be explicitly set.
 */
processIntegrationTestResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}