plugins {
    id 'java-library'
    id 'eclipse'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.21.0'
    id 'org.cyclonedx.bom' version '1.7.4'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileJava.options.encoding = 'US-ASCII'

apply from: '../dependencies.gradle'
apply from: 'integration-test.gradle'

// to get the latest SNAPSHOT uncomment the following lines
configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

Properties properties = new Properties()
File propFile=project.file('user.properties')
if(propFile.exists()){
	properties.load(propFile.newDataInputStream())
}
def dburl = System.getProperty('dburl',properties.get('dburl'))
def dbusr = System.getProperty('dbusr',properties.get('dbusr'))
def dbpwd = System.getProperty('dbpwd',properties.get('dbpwd'))
def ftpurl = System.getProperty('ftpurl',properties.get('ftpurl'))
def ftpusr = System.getProperty('ftpusr',properties.get('ftpusr'))
def ftppwd = System.getProperty('ftppwd',properties.get('ftppwd'))

configurations.all {
    resolutionStrategy { 
        force 'ch.interlis:ili2c-tool:5.3.2' 
        force 'ch.interlis:ili2c-core:5.3.2'
        force 'ch.interlis:ili2gpkg:4.11.1'
        force 'ch.interlis:iox-ili:1.21.18'
    }
}

configurations {
    integrationTestImplementation {
    }
    testImplementation {
        exclude group: 'org.apache.hadoop', module: 'hadoop-core' // Konflikt zwischen "core" und "client". Siehe iox-parquet.
        exclude group: 'org.slf4j', module: 'slf4j-reload4j'
    }

    integrationTestImplementation.extendsFrom implementation
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestImplementation.extendsFrom runtime
    integrationTestImplementation.extendsFrom testRuntime

    all*.exclude module: 'spring-boot-starter-logging'
    
    all*.exclude group: 'org.slf4j', module: 'slf4j-simple'
    all*.exclude group: 'ch.qos.logback', module: 'logback-classic'    
}

dependencies {
    api gradleApi()
  
    api ilivalidatorDependency
    api ilivalidatorCustomFunctionsDependency
    api ilivalidatorCustomFunctionsGeometriesDependency
    api geowCustomFunctionsDependency
    api (ili2pgDependency) {
        exclude group: 'ch.ehi', module: 'ehisqlgen'
    }
    api (ili2gpkgDependency) {
        exclude group: 'ch.ehi', module: 'ehisqlgen'
    }
    api (ioxWkfDependency) {
        // Exclude old dependencies. These get overriden anyways.
        // And they show on Snaphots...
        exclude group: 'ch.interlis', module: 'ili2pg'        
        exclude group: 'ch.interlis', module: 'ili2gpkg'
    }
    api ioxIliDependency
    api ehiSqlgenDependency

    api (ioxFormatsDependency) {
        exclude group: 'org.slf4j', module: 'slf4j-reload4j'
    }

    api av2chDependency
    api av2geobauDependency
    
    api awsSdkS3Dependency
    
    api apacheCommonsIoDependency
    api apacheCommonsNetDependency
    api apacheCommonsCodeDependency
    api apacheHttpClientDependency
    api apacheHttpClientMimeDependency
    
    api jacksonCoreDependency
    api jacksonDatabindDependency
    
    api saxonDependency
    
    api tomljDependency
    
    api freemarkerDependency
    
	api 'com.github.robtimus:sftp-fs:2.0.4'
    
    runtimeOnly postgresqlDependency
    runtimeOnly sqliteJdbcDependency
    runtimeOnly derbyDependency
    runtimeOnly duckdbDependency
    runtimeOnly oracleDependency
    
    testImplementation junitDependency
    testImplementation testContainersDependency
    testImplementation testContainersPostgresDependency
    
    testImplementation mockWebServerDependency

    testImplementation testContainersOracleDependency

    testImplementation 'org.apache.tomcat.embed:tomcat-embed-core:9.0.69'
    
    testImplementation 'org.apache.hadoop:hadoop-client:3.3.5'
    integrationTestImplementation 'org.apache.hadoop:hadoop-client:3.3.5'
    
}

gradlePlugin {
    plugins {
        gretlPlugin {
            id = 'ch.so.agi.gretl'
            implementationClass = 'ch.so.agi.gretl.gradle.GretlPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/sogis/gretl' 
    vcsUrl = 'https://github.com/sogis/gretl.git' 
    tags = ['etl', 'gis', 'sdi', 'geo', 'geoinformation', 'interlis', 'geopackage', 'shapefile', 'csv', 'database', 'postgresql', 'sqlite', 'ili2pg', 'ilivalidator'] 
    
    plugins { 
        gretlPlugin {  
            displayName = 'GRETL' 
            description = 'The Gradle gretl plugin extends gradle for use as a sql-centric (geo)data etl. gretl = gradle etl.' 
        }
    }
}

task setupPluginUpload() {
    description = "Converts Gradle plugin publish key and secret from environment variable to system property. (Workaround)"
    doLast {
	    def key=System.env.gradlePublishKey
	    def secret = System.env.gradlePublishSecret
	
	    if( !key || !secret)
	    {
	        throw new RuntimeException("gradlePublishKey and/or gradlePublishSecret are not defined environment variables")
	    }
	
	    System.properties.setProperty("gradle.publish.key", key)
	    System.properties.setProperty("gradle.publish.secret", secret)
    }
}
tasks.publishPlugins.dependsOn tasks.setupPluginUpload

test {
    useJUnit{
        // Exclude all Tests with dependency to a db server (pg, oracle, ..)
        excludeCategories 'ch.so.agi.gretl.testutil.DbTest'
        excludeCategories 'ch.so.agi.gretl.testutil.SftpTest'
        excludeCategories 'ch.so.agi.gretl.testutil.S3Test'
    }
}

task dbTest(type: Test, dependsOn: [compileJava, compileTestJava]) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs all unit tests with dependency to a db server (pg, oracle, ...).'
    useJUnit {
        includeCategories 'ch.so.agi.gretl.testutil.DbTest'
    }
}
task sftpTest(type: Test, dependsOn: [compileJava, compileTestJava]) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs all unit tests with dependency to a SFTP server'
    useJUnit {
        includeCategories 'ch.so.agi.gretl.testutil.SftpTest'
    }
}

def s3AccessKey = System.getProperty('s3AccessKey',properties.get('s3AccessKey'))
def s3SecretKey = System.getProperty('s3SecretKey',properties.get('s3SecretKey'))
def s3BucketName = System.getProperty('s3BucketName',properties.get('s3BucketName'))

task s3Test(type: Test, dependsOn: [compileJava, compileTestJava]) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs all unit tests with dependency to AWS S3.'
    
    useJUnit {
        includeCategories 'ch.so.agi.gretl.testutil.S3Test'
    }
}

// Transfer the required configuration variables to the test code.
// (The test code has no access to the -D or -P variables as it is executed in a separate jvm-process)
tasks.withType(Test) {
    def GRETLTEST_DBURI = 'gretltest_dburi_pg'
    systemProperty(GRETLTEST_DBURI, findProperty(GRETLTEST_DBURI))
    
    systemProperty('GRETL_PROJECT_ABS_PATH', project(':gretl').getProjectDir().getAbsolutePath())
    systemProperty('ROOT_PROJECT_ABS_PATH', project.getRootProject().getProjectDir().getAbsolutePath())
    
    systemProperty 's3AccessKey', s3AccessKey
    systemProperty 's3SecretKey', s3SecretKey
    systemProperty 's3BucketName', s3BucketName
}

cyclonedxBom {
   includeConfigs = ["runtimeClasspath"]
   destination = file("build/reports")
   outputName = "Sbom"
   outputFormat = "all"
}

/*
   Starting with 7.0.0 there is no default strategy anymore. So it has to be explicitly set.
   https://github.com/gradle/gradle/issues/17236
 */
processResources{
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

/*
   init_postgresql.sql seems to be copied multiple times.
   Starting with 7.0.0 there is no default strategy anymore. So it has to be explicitly set.
 */
processIntegrationTestResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}