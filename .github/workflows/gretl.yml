name: gretl

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - 'docs/**'
      - 'openshift/**'
      - '**.md'

jobs:
  build:
    env:
      BUILD_NUMBER: ${{ github.run_number }}
      DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
      DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}} 

    runs-on: ubuntu-22.04
    
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Build with Gradle
        run: ./gradlew clean gretl:classes 

      - name: Unit tests and publish plugin to local maven repo
        # run: |
        #   TZ="Europe/Zurich" ./gradlew gretl:test gretl:dbTest gretl:s3Test
        #   ./gradlew gretl:build gretl:javadoc gretl:publishPluginMavenPublicationToMavenLocal -x test
        run: |
          ./gradlew gretl:build gretl:javadoc gretl:publishPluginMavenPublicationToMavenLocal -x test

      - name: Debug
        run: |
          ls -la ~/.m2/repository/ch/so/agi/gretl

      # - name: Integration tests (Plugin)
      #   id: jarTest
      #   run: |
      #     TZ="Europe/Zurich" ./gradlew gretl:jarTest gretl:jarS3Test

      # - uses: actions/upload-artifact@v4
      #   if: always() && (steps.jarTest.outcome == 'failure')
      #   with:
      #     name: reports-jar
      #     path: gretl/build/reports/tests/

      - name: Build Docker image for integration tests
        run: |
          ./gradlew runtimeImage:buildImage

      - name: List images
        run: |
          docker images

      # - name: Integration tests (Docker image)
      #   id: imageTest
      #   run: |
      #     mkdir -p "$HOME"/gradlecache
      #     chmod 777 -R "$HOME"/gradlecache
      #     TZ="Europe/Zurich" ./gradlew gretl:imageTest gretl:imageS3Test
      #   # run: |
      #   #   TZ="Europe/Zurich" ./gradlew gretl:imageTest --tests ch.so.agi.gretl.jobs.XslTransformerTest

      # - uses: actions/upload-artifact@v4
      #   if: always() && (steps.imageTest.outcome == 'failure')
      #   with:
      #     name: reports-image
      #     path: gretl/build/reports/tests/

      - name: Setup Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: 1.6.40

      - name: Render documentation with Quarto
        run: |
            quarto render gretl/src/docs/ --to html --output-dir ../../../docs/user
            ls -la docs/user
            VERSION=$(./gradlew properties --no-daemon --console=plain -q | grep '^version:' | awk '{print $2}')
            sed -i "s/publisher\.md/publisher-${VERSION}.html/g" docs/user/reference.html
            mv docs/user/reference.html docs/user/reference-${VERSION}.html
            mv docs/user/publisher.html docs/user/publisher-${VERSION}.html
            ls -la docs/user

      - name: Create s3 config and credentials file
        run: |
          mkdir ~/.aws/
          touch ~/.aws/config
          touch ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "endpoint_url = ${{secrets.EXO_S3_ENDPOINT_URL}}" >> ~/.aws/config
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{secrets.EXO_S3_KEY_ID}}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{secrets.EXO_S3_SECRET_ACCESS_KEY}}" >> ~/.aws/credentials

      - name: Debug
        run: |
          cat ~/.aws/config
          cat ~/.aws/credentials

      - name: Debug
        run: |
          aws s3 ls --region ch-dk-2

      - name: Publish to S3
        run: |
          aws s3 cp docs/user s3://ch.so.agi.gretl-docs --recursive --exclude "*" --include "*.html" --acl public-read --region ch-dk-2

      - name: Login to Docker Container Registry
        #if: ${{ (github.ref == 'refs/heads/main') && (github.event_name != 'pull_request') && !env.ACT }}
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        #if: ${{ (github.ref == 'refs/heads/main') && (github.event_name != 'pull_request') && !env.ACT }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        #if: ${{ (github.ref == 'refs/heads/main') && (github.event_name != 'pull_request') && !env.ACT }}
        uses: docker/setup-buildx-action@v2

      - name: Publish plugin
        if: ${{ (github.ref == 'refs/heads/main') && (github.event_name != 'pull_request') && !env.ACT }}
        run: ./gradlew gretl:publishPlugins -s
        env:
          gradlePublishKey: ${{ secrets.GRADLEPUBLISHKEY }}
          gradlePublishSecret: ${{ secrets.GRADLEPUBLISHSECRET }}

      - name: Build final multi-arch Docker image and push to registry 
        #if: ${{ (github.ref == 'refs/heads/main') && (github.event_name != 'pull_request') && !env.ACT }}
        run: |
          ./gradlew runtimeImage:buildAndPushMultiArchImage
